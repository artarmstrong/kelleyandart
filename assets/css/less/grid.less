//============================================================
// BaseWeb - Font Includes via @font-face
// https://github.com/sebnitu/BaseWeb
//============================================================
// Notes & Credits:
// The grid system is forked from 960 Grid System(1) and modified
// to create fluid layout support and a responsive structure for the
// desktop, tablet and mobile. CSS clear class by Nathan Smith(2) and
// clearfix class by Thierry Koblentz(3). I'm using a method in LESS
// to output the column styles that is used in Bootstrap by Twitter(4).
//
// 1) http://960.gs/
// 2) http://sonspring.com/journal/clearing-floats
// 3) http://www.yuiblog.com/blog/2010/09/27/clearfix-reloaded-overflowhidden-demystified
// 4) http://twitter.github.com/bootstrap/
//============================================================
// Hard Variables (should not be changed)
//============================================================

// Container width
@gridWidth: (@gridColumnWidth * @gridColumns) + (@gridGutterWidth * @gridColumns);

// Left and right margin value
@gridMargin: @gridGutterWidth / 2;
@fluidMargin: @fluidGridGutterWidth / 2;

//============================================================
// Clearing Elements
//============================================================

.clear {
    clear: both; display: block;
    overflow: hidden; visibility: hidden;
    width: 0; height: 0;
}
.clearfix {
    *zoom: 1;
    &:before, &:after {
        content: "\0020"; display: block;
        overflow: hidden; visibility: hidden;
        width: 0; height: 0;
    }
    &:after {
        clear: both;
    }
}

//============================================================
// Base Grid System
//============================================================

#gridSystem {
    
    .base(@gridColumnWidth, @gridGutterWidth) {
        
        // Global grid styles
        .container {
            position: relative;
            margin-left: auto; margin-right: auto;
            width: @gridWidth; clear: both;
            .clearfix();
        }
        [class*="grid-"] {
            display: inline; float: left; position: relative;
            margin-left: @gridMargin; margin-right: @gridMargin;
        }
        [class*="push-"], [class*="pull-"] {
            position: relative;
        }
        // Children Column ( Alpha ~ First, Omega ~ Last )
        .alpha { margin-left: 0 !important; }
        .omega { margin-right: 0 !important; }
        
        // grid-X
        .grid-X (@index) when (@index > 0) {
            (~".grid-@{index}") { .grid-(@index); }
            .grid-X(@index - 1);
        }
        .grid-X (0) {}
        // Calculate width to grid-X
        .grid- (@gridColumns) {
            width: (@gridColumnWidth * @gridColumns) + (@gridGutterWidth * (@gridColumns - 1));
        }
        
        // move-X builds prefix, suffix, push and pull rules
        .prefix-X (@index) when (@index > 0) {
            (~".prefix-@{index}") { .prefix-(@index); }
            .prefix-X(@index - 1);
        }
        .suffix-X (@index) when (@index > 0) {
            (~".suffix-@{index}") { .suffix-(@index); }
            .suffix-X(@index - 1);
        }
        .push-X (@index) when (@index > 0) {
            (~".push-@{index}") { .push-(@index); }
            .push-X(@index - 1);
        }
        .pull-X (@index) when (@index > 0) {
            (~".pull-@{index}") { .pull-(@index); }
            .pull-X(@index - 1);
        }
        .prefix-X (0) {}
        .suffix-X (0) {}
        .push-X (0) {}
        .pull-X (0) {}

        .prefix- (@gridColumns) {
            padding-left: (@gridColumnWidth * @gridColumns) + (@gridGutterWidth * @gridColumns);
        }
        .suffix- (@gridColumns) {
            padding-right: (@gridColumnWidth * @gridColumns) + (@gridGutterWidth * @gridColumns);
        }
        .push- (@gridColumns) {
            left: (@gridColumnWidth * @gridColumns) + (@gridGutterWidth * @gridColumns);
        }
        .pull- (@gridColumns) {
            left: -(@gridColumnWidth * @gridColumns) + (@gridGutterWidth * @gridColumns);
        }
        
        // Generate grid-X, prefix-X, suffix-X, push-X and pull-X
        .grid-X (@gridColumns);
        .prefix-X (@gridColumns);
        .suffix-X (@gridColumns);
        .push-X (@gridColumns);
        .pull-X (@gridColumns);
    
    } // End .base()
    
    .fluid(@fluidGridColumnWidth, @fluidGridGutterWidth) {
        
        // Fluid grid overrides
        .container.fluid {
            width: 92%; margin-left: 4%; margin-right: 4%;
        }
        .fluid [class*="grid-"] {
            margin-left: @fluidMargin; margin-right: @fluidMargin;
        }
        
        // Fluid grid-X
        .grid-X (@index) when (@index > 0) {
            (~".grid-@{index}") { .grid-(@index); }
            .grid-X(@index - 1);
        }
        .grid-X (0) {}
        // Calculate width to grid-X
        .grid- (@gridColumns) {
            width: (@fluidGridColumnWidth * @gridColumns) + (@fluidGridGutterWidth * (@gridColumns - 1));
        }
        
        // move-X builds prefix, suffix, push and pull rules
        .prefix-X (@index) when (@index > 0) {
            (~".prefix-@{index}") { .prefix-(@index); }
            .prefix-X(@index - 1);
        }
        .suffix-X (@index) when (@index > 0) {
            (~".suffix-@{index}") { .suffix-(@index); }
            .suffix-X(@index - 1);
        }
        .push-X (@index) when (@index > 0) {
            (~".push-@{index}") { .push-(@index); }
            .push-X(@index - 1);
        }
        .pull-X (@index) when (@index > 0) {
            (~".pull-@{index}") { .pull-(@index); }
            .pull-X(@index - 1);
        }
        .prefix-X (0) {}
        .suffix-X (0) {}
        .push-X (0) {}
        .pull-X (0) {}

        .prefix- (@gridColumns) {
            padding-left: (@fluidGridColumnWidth * @gridColumns) + (@fluidGridGutterWidth * @gridColumns);
        }
        .suffix- (@gridColumns) {
            padding-right: (@fluidGridColumnWidth * @gridColumns) + (@fluidGridGutterWidth * @gridColumns);
        }
        .push- (@gridColumns) {
            left: (@fluidGridColumnWidth * @gridColumns) + (@fluidGridGutterWidth * @gridColumns);
        }
        .pull- (@gridColumns) {
            left: -(@fluidGridColumnWidth * @gridColumns) + (@fluidGridGutterWidth * @gridColumns);
        }
        
        // Generate grid-X, prefix-X, suffix-X, push-X and pull-X
        .fluid {
            .grid-X (@gridColumns);
            .prefix-X (@gridColumns);
            .suffix-X (@gridColumns);
            .push-X (@gridColumns);
            .pull-X (@gridColumns);
        }
        
    } // End .fluid()
    
    .mobile() {
        
        .container, .container.fluid {
            width: 100%; padding: 0; margin: 0;
        }
        [class*="grid-"], .fluid [class*="grid-"] {
            width: 89%; margin: 0 6%;
        }
        [class*="prefix-"], .fluid [class*="prefix-"] {
            padding-left: 0;
        }
        [class*="suffix-"], .fluid [class*="suffix-"] {
            padding-right: 0;
        }
        [class*="push-"], .fluid [class*="push-"], [class*="pull-"], .fluid [class*="pull-"] {
            left: 0;
        }
        
        // Children Column ( Alpha ~ First, Omega ~ Last )
        .alpha, .omega {
            width: 100%;
            margin-left: 0 !important; 
            margin-right: 0 !important
        }
        
    } // End .mobile()
    
} // End #gridSystem

//============================================================
// Span System
//============================================================

#spanSystem {
    
    .base() {
        [class*="span-"] {
            display: inline;
            float: left;
            position: relative;
        }
        .span-wrap {
            float: none;
            display: block;
            width: 100%;
            .clearfix();
        }
        
        .span-half {
            width: 48%;
            margin-left: 4%;
        }
        .span-half:first-child {
            margin-left: 0;
        }
    }
    
    .mobile() {
        
    }
    
}

//============================================================
// Grid System Calls
//============================================================
// Default Grid System
//========================================
#gridSystem > .base(@gridColumnWidth, @gridGutterWidth);
#gridSystem > .fluid(@fluidGridColumnWidth, @fluidGridGutterWidth);

// Span System
//========================================
#spanSystem > .base();

//============================================================
// End of Grid System
//============================================================